(self.webpackChunkcapricorn_blog=self.webpackChunkcapricorn_blog||[]).push([[56],{6094:(e,a,l)=>{"use strict";l.r(a),l.d(a,{data:()=>r});const r={key:"v-250a9aa0",path:"/note/webpack.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"webpack整体运行流程分析",slug:"webpack整体运行流程分析",children:[]},{level:3,title:"loader整体运行流程分析",slug:"loader整体运行流程分析",children:[]},{level:3,title:"plugin",slug:"plugin",children:[]}],filePathRelative:"note/webpack.md",git:{updatedTime:1657074241e3,contributors:[]}}},1999:(e,a,l)=>{"use strict";l.r(a),l.d(a,{default:()=>n});const r=(0,l(6252).uE)('<h3 id="webpack整体运行流程分析" tabindex="-1"><a class="header-anchor" href="#webpack整体运行流程分析" aria-hidden="true">#</a> webpack整体运行流程分析</h3><p>webpack本质上是一个JS Module Bundler ，用于将多个代码模块进行打包，bundler从一个钩子建入口出发，解析代码，分析出代码模块的依赖关系，然后将依赖的代码模块组合在一起，在Javascript bundler 中，还需要提供一些胶水代码让多个模块代码可以协同工作，相互引用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>创建compiler <span class="token operator">-</span><span class="token operator">&gt;</span> 调用compiler<span class="token punctuation">.</span>run 开始构建，创建compilation <span class="token operator">-</span><span class="token operator">&gt;</span> 构建配置开始创建chunk <span class="token operator">-</span><span class="token operator">&gt;</span> 使用parser\n从chunk开始打包 <span class="token operator">-</span><span class="token operator">&gt;</span> 使用module和dependency管理代码模块相互依赖关系 <span class="token operator">-</span><span class="token operator">&gt;</span> 使用Template基于compilation的数据生成结果代码\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><img src="https://pic3.zhimg.com/80/v2-e8dd140fa3852daf25371de3b57aa6fe_720w.jpg"><h3 id="loader整体运行流程分析" tabindex="-1"><a class="header-anchor" href="#loader整体运行流程分析" aria-hidden="true">#</a> loader整体运行流程分析</h3><ul><li><p>loader是以相反的顺序执行的</p></li><li><p>最后的loader最早被调用，传入的原始的资源内容（可能是代码，也可能是二进制文件，用buffer处理）第一个loader最后调用，返回的js代码和sourcemap对象，中间的loader执行时 传入的是上一个loader执行的结果</p></li><li><p>多个loader执行顺序是这样的，但是对于大多数单个loader来说是无感知的，只需要处理好传入的内容就好</p></li><li><p>还有一种情况是，loader中异步处理的，有一些loader 处理依赖于外部I/O的结果，导致他必须使用异步的方式来处理，这个使用需要在loader 执行的时候调用this.async()来标识此loader 为异步处理，然后使用this.callback来返回loader处理的结果</p></li><li><p>file-loader 可以指定要复制和放置资源文件的位置，以及如何使用版本哈希命名以获得更好的缓存。此外，这意味着 你可以就近管理图片文件，可以使用相对路径而不用担心部署时 URL 的问题。使用正确的配置，webpack 将会在打包输出中自动重写文件路径为正确的 URL。</p></li><li><p>url-loader 允许你有条件地将文件转换为内联的 base-64 URL (当文件小于给定的阈值)，这会减少小文件的 HTTP 请求数。如果文件大于该阈值，会自动的交给 file-loader 处理。</p></li></ul><h4 id="url-loader和file-loader关系" tabindex="-1"><a class="header-anchor" href="#url-loader和file-loader关系" aria-hidden="true">#</a> url-loader和file-loader关系</h4><p>简答地说，url-loader 封装了 file-loader。url-loader 不依赖于 file-loader，即使用 url-loader 时，只需要安装 url-loader 即可，不需要安装 file-loader，因为 url-loader 内置了 file-loader。</p><h3 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin" aria-hidden="true">#</a> plugin</h3>',9),n={render:function(e,a){return r}}}}]);